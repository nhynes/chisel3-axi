package axi

import chisel3._
import chisel3.core.BundleLitBinding
import chisel3.util._

/** Axi stream signals.
  *
  * @param dataWidth bus width in bits
  * @param userWidth user data width in bits. Recommended to be a multiple of `dataWidth`.
  * @param destWidth dest signal width in bits. Recommended to be no more than 4.
  * @param idWidth id signal width in bits. Recommended to be no more than 8.
  *
  * Note: optional fields are not Option[Data] for compatibility with Vivado which makes
  *       them have width=1. They are optimized out during synthesis. Use `initDefault` to
  *       squelch warnings generated by Chisel.
  */
class AxiStream(val dataWidth: Int, val userWidth: Int, val destWidth: Int, val idWidth: Int)
    extends Bundle {
  val dataBytes = dataWidth / 8
  def allStrb = (Math.pow(2, dataBytes).toInt - 1).U

  val data = UInt(dataWidth.W)
  val last = Bool()
  val strb = UInt(dataBytes.W)
  val keep = UInt(dataBytes.W)
  val user = UInt(userWidth.W)
  val dest = UInt(destWidth.W)
  val id = UInt(idWidth.W)

  def initDefault() = {
    keep := allStrb
    strb := allStrb
    user := 0.U
    dest := 0.U
    id := 0.U
  }

  def Lit(data: UInt,
          last: Bool,
          strb: UInt = allStrb,
          keep: UInt = allStrb,
          user: UInt = 0.U,
          dest: UInt = 0.U,
          id: UInt = 0.U) = {
    val clone = cloneType
    clone.selfBind(
      BundleLitBinding(
        Map(
          clone.data -> litArgOfBits(data),
          clone.last -> litArgOfBits(last),
          clone.strb -> litArgOfBits(strb),
          clone.keep -> litArgOfBits(keep),
          clone.user -> litArgOfBits(user),
          clone.dest -> litArgOfBits(dest),
          clone.id -> litArgOfBits(id),
        )))
    clone
  }
}

object AxiStream {
  def apply(dataWidth: Int, userWidth: Int = 1, destWidth: Int = 1, idWidth: Int = 1) = {
    new AxiStream(dataWidth = dataWidth,
                  userWidth = userWidth,
                  destWidth = destWidth,
                  idWidth = idWidth)
  }
}

object AxiStreamMaster {
  def apply(dataWidth: Int, userWidth: Int = 1, destWidth: Int = 1, idWidth: Int = 1) = {
    Decoupled(
      AxiStream(dataWidth = dataWidth,
                userWidth = userWidth,
                destWidth = destWidth,
                idWidth = idWidth))
  }
}

object AxiStreamSlave {
  def apply(dataWidth: Int, userWidth: Int = 1, destWidth: Int = 1, idWidth: Int = 1) = {
    Flipped(
      Decoupled(
        AxiStream(dataWidth = dataWidth,
                  userWidth = userWidth,
                  destWidth = destWidth,
                  idWidth = idWidth)))
  }
}
